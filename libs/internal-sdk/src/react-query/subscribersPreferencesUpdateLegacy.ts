/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { NovuCore } from "../core.js";
import { subscribersPreferencesUpdateLegacy } from "../funcs/subscribersPreferencesUpdateLegacy.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useNovuContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type SubscribersPreferencesUpdateLegacyMutationVariables = {
  request: operations.SubscribersV1ControllerUpdateSubscriberPreferenceRequest;
  options?: RequestOptions;
};

export type SubscribersPreferencesUpdateLegacyMutationData =
  operations.SubscribersV1ControllerUpdateSubscriberPreferenceResponse;

/**
 * Update subscriber preference
 */
export function useSubscribersPreferencesUpdateLegacyMutation(
  options?: MutationHookOptions<
    SubscribersPreferencesUpdateLegacyMutationData,
    Error,
    SubscribersPreferencesUpdateLegacyMutationVariables
  >,
): UseMutationResult<
  SubscribersPreferencesUpdateLegacyMutationData,
  Error,
  SubscribersPreferencesUpdateLegacyMutationVariables
> {
  const client = useNovuContext();
  return useMutation({
    ...buildSubscribersPreferencesUpdateLegacyMutation(client, options),
    ...options,
  });
}

export function mutationKeySubscribersPreferencesUpdateLegacy(): MutationKey {
  return ["@novu/api", "Preferences", "updateLegacy"];
}

export function buildSubscribersPreferencesUpdateLegacyMutation(
  client$: NovuCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: SubscribersPreferencesUpdateLegacyMutationVariables,
  ) => Promise<SubscribersPreferencesUpdateLegacyMutationData>;
} {
  return {
    mutationKey: mutationKeySubscribersPreferencesUpdateLegacy(),
    mutationFn: function subscribersPreferencesUpdateLegacyMutationFn({
      request,
      options,
    }): Promise<SubscribersPreferencesUpdateLegacyMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(subscribersPreferencesUpdateLegacy(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

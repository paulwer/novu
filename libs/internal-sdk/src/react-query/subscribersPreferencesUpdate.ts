/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { NovuCore } from "../core.js";
import { subscribersPreferencesUpdate } from "../funcs/subscribersPreferencesUpdate.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useNovuContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type SubscribersPreferencesUpdateMutationVariables = {
  patchSubscriberPreferencesDto: components.PatchSubscriberPreferencesDto;
  subscriberId: string;
  idempotencyKey?: string | undefined;
  options?: RequestOptions;
};

export type SubscribersPreferencesUpdateMutationData =
  operations.SubscribersControllerUpdateSubscriberPreferencesResponse;

/**
 * Update subscriber global or workflow specific preferences
 *
 * @remarks
 * Update subscriber global or workflow specific preferences
 */
export function useSubscribersPreferencesUpdateMutation(
  options?: MutationHookOptions<
    SubscribersPreferencesUpdateMutationData,
    Error,
    SubscribersPreferencesUpdateMutationVariables
  >,
): UseMutationResult<
  SubscribersPreferencesUpdateMutationData,
  Error,
  SubscribersPreferencesUpdateMutationVariables
> {
  const client = useNovuContext();
  return useMutation({
    ...buildSubscribersPreferencesUpdateMutation(client, options),
    ...options,
  });
}

export function mutationKeySubscribersPreferencesUpdate(): MutationKey {
  return ["@novu/api", "Preferences", "update"];
}

export function buildSubscribersPreferencesUpdateMutation(
  client$: NovuCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: SubscribersPreferencesUpdateMutationVariables,
  ) => Promise<SubscribersPreferencesUpdateMutationData>;
} {
  return {
    mutationKey: mutationKeySubscribersPreferencesUpdate(),
    mutationFn: function subscribersPreferencesUpdateMutationFn({
      patchSubscriberPreferencesDto,
      subscriberId,
      idempotencyKey,
      options,
    }): Promise<SubscribersPreferencesUpdateMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(subscribersPreferencesUpdate(
        client$,
        patchSubscriberPreferencesDto,
        subscriberId,
        idempotencyKey,
        mergedOptions,
      ));
    },
  };
}
